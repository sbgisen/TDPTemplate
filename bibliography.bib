@misc{openai2023gpt4,
  title         = {GPT-4 Technical Report},
  author        = {OpenAI},
  year          = {2023},
  eprint        = {2303.08774},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CL}
}

@misc{SileroVAD,
  author       = {Silero Team},
  title        = {Silero VAD: pre-trained enterprise-grade Voice Activity Detector (VAD), Number Detector and Language Classifier},
  year         = {2021},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/snakers4/silero-vad}},
  commit       = {insert_some_commit_here},
  email        = {hello@silero.ai}
}

@article{efficientnet,
  author   = {Chidhambararajan, R. and Rangapur, Aman and Sibi Chakkaravarthy, S. and Cherukuri, Aswani Kumar and Cruz, Meenalosini Vimal and Ilango, S. Sudhakar},
  title    = {EfficientWord-Net: An Open Source Hotword Detection Engine Based on Few-Shot Learning},
  journal  = {Journal of Information \& Knowledge Management},
  volume   = {21},
  number   = {04},
  pages    = {2250059},
  year     = {2022},
  doi      = {10.1142/S0219649222500599},
  url      = {https://doi.org/10.1142/S0219649222500599},
  eprint   = {https://doi.org/10.1142/S0219649222500599},
  abstract = { Voice assistants like Siri, Google Assistant and Alexa are used widely across the globe for home automation.
              They require the use of unique phrases, also known as hotwords, to wake them up and perform an action like “Hey Alexa!”,
              “Ok, Google!”, “Hey, Siri!”. These hotword detectors are lightweight real-time engines whose purpose is to detect the
              hotwords uttered by the user. However, existing engines require thousands of training samples or is closed source 
              seeking a fee. This paper attempts to solve the same, by presenting the design and implementation of a lightweight,
              easy-to-implement hotword detection engine based on few-shot learning. The engine detects the hotword uttered by the 
              user in real-time with just a few training samples of the hotword. This approach is efficient when compared to existing
              implementations because the process of adding a new hotword to the existing systems requires enormous amounts of positive
              and negative training samples, and the model needs to retrain for every hotword, making the existing implementations 
              inefficient in terms of computation and cost. The architecture proposed in this paper has achieved an accuracy of 95.40\%.}
}

@software{yolov8_ultralytics,
  author  = {Glenn Jocher and Ayush Chaurasia and Jing Qiu},
  title   = {Ultralytics YOLOv8},
  version = {8.0.0},
  year    = {2023},
  url     = {https://github.com/ultralytics/ultralytics},
  orcid   = {0000-0001-5950-6979, 0000-0002-7603-6750, 0000-0003-3783-7069},
  license = {AGPL-3.0}
}

@techreport{ferguson2015robust,
  title       = {Robust and Efficient Calibration of Mobile Manipulators},
  author      = {Ferguson, Michael and Arora, Niharika},
  year        = {2015},
  institution = {Fetch Robotics, Tech. Rep}
}

@misc{radford2022robust,
  title         = {Robust Speech Recognition via Large-Scale Weak Supervision},
  author        = {Alec Radford and Jong Wook Kim and Tao Xu and Greg Brockman and Christine McLeavey and Ilya Sutskever},
  year          = {2022},
  eprint        = {2212.04356},
  archiveprefix = {arXiv},
  primaryclass  = {eess.AS}
}
